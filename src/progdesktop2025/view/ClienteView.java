/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package progdesktop2025.view;

import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import progdesktop2025.controller.ClienteController;
import util.Util;

/**
 *
 * @author jogos
 */
public class ClienteView extends javax.swing.JFrame {
    
    private final int SEARCHINDEX = 1; // CPF
    private final String VALUEINDEX = "CPF";
    private boolean estadoSelecionar;
    private int linhaAtual;

    /**
     * Creates new form ClienteView
     */
    public ClienteView() {
        initComponents();
        //this.atualizacao();
        this.selecionarToggle(true);
        this.estadoSelecionar = false;
        this.ativarSalvarDeletar(this.estadoSelecionar);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        fieldCpf = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        fieldNome = new javax.swing.JTextField();
        jButtonLimpar = new javax.swing.JButton();
        jButtonDeletar = new javax.swing.JButton();
        jButtonNovo = new javax.swing.JButton();
        jButtonSalvar = new javax.swing.JButton();
        jButtonImportar = new javax.swing.JButton();
        jButtonExportar = new javax.swing.JButton();
        jButtonSelecionar = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        fieldSelecionar = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"JosÃ©", "123 123 123 123"}
            },
            new String [] {
                "Nome", "Cpf"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable.setRowSelectionAllowed(false);
        jScrollPane1.setViewportView(jTable);
        if (jTable.getColumnModel().getColumnCount() > 0) {
            jTable.getColumnModel().getColumn(0).setResizable(false);
            jTable.getColumnModel().getColumn(0).setHeaderValue("Nome");
            jTable.getColumnModel().getColumn(1).setResizable(false);
            jTable.getColumnModel().getColumn(1).setHeaderValue("Cpf");
        }

        jLabel1.setText("CPF");

        jLabel2.setText("Nome");

        jButtonLimpar.setText("Limpar");
        jButtonLimpar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jButtonLimparMouseClicked(evt);
            }
        });

        jButtonDeletar.setText("Deletar");
        jButtonDeletar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jButtonDeletarMouseClicked(evt);
            }
        });

        jButtonNovo.setText("Novo");
        jButtonNovo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jButtonNovoMouseClicked(evt);
            }
        });

        jButtonSalvar.setText("Salvar");
        jButtonSalvar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jButtonSalvarMouseClicked(evt);
            }
        });

        jButtonImportar.setText("Importar");
        jButtonImportar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jButtonImportarMouseClicked(evt);
            }
        });

        jButtonExportar.setText("Exportar");
        jButtonExportar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jButtonExportarMouseClicked(evt);
            }
        });

        jButtonSelecionar.setText("Selecionar");
        jButtonSelecionar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jButtonSelecionarMouseClicked(evt);
            }
        });

        jLabel3.setText("CPF");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 621, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(fieldCpf)
                    .addComponent(fieldNome, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButtonExportar)
                                .addGap(28, 28, 28)
                                .addComponent(jButtonImportar))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButtonNovo)
                                .addGap(18, 18, 18)
                                .addComponent(jButtonLimpar)))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButtonDeletar)
                                .addGap(36, 36, 36)
                                .addComponent(jButtonSalvar)
                                .addGap(34, 34, 34)
                                .addComponent(jButtonSelecionar))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(fieldSelecionar)))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fieldNome, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fieldCpf, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonLimpar)
                    .addComponent(jButtonNovo))
                .addGap(13, 13, 13)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(fieldSelecionar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonDeletar)
                    .addComponent(jButtonSalvar)
                    .addComponent(jButtonSelecionar))
                .addGap(50, 50, 50)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonImportar)
                    .addComponent(jButtonExportar))
                .addContainerGap(17, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //private void atualizacao() {
    //comboBox.setEnabled(false);
    //DefaultComboBoxModel<String> comboBoxModel = (DefaultComboBoxModel<String>) comboBox.getModel();
    //comboBoxModel.removeAllElements();
    //TableModel jTableModel = jTable.getModel();
    //for (int row = 0; row < jTableModel.getRowCount(); row++) {
    //String nome = model.getValueAt(row, 0);
    //String cpf = model.getValueAt(row, 1);
    //}
    //}
    private int procurarValor(String valor) {
        DefaultTableModel jTableModel = (DefaultTableModel) jTable.getModel();
        
        String valorBusca = Util.removeDotsSpaces(valor);
        
        for (int linha = 0; linha < jTableModel.getRowCount(); linha++) {
            
            String valorAtual = Util
                    .removeDotsSpaces(jTableModel
                            .getValueAt(linha, this.SEARCHINDEX)
                            .toString()
                    );
            
            if (valorBusca.equalsIgnoreCase(valorAtual)) {
                return linha;
            }
        }
        
        return -1;
    }
    
    private void ativarSalvarDeletar(boolean estado) {
        this.jButtonDeletar.setEnabled(estado);
        this.jButtonSalvar.setEnabled(estado);
        this.estadoSelecionar = estado;
    }
    
    private void limparFields() {
        this.fieldNome.setText("");
        this.fieldCpf.setText("");
        //this.atualizacao();
    }
    
    private void limparSelecionar() {
        this.fieldSelecionar.setText("");
    }
    
    private void limparjTable() {
        DefaultTableModel jTableModel = (DefaultTableModel) jTable.getModel();
        
        jTableModel.setRowCount(0);

        //atualizacao();
    }
    
    private void selecionarToggle(boolean estado) {
        jTable.setRowSelectionAllowed(estado);
        
        jTable.setColumnSelectionAllowed(estado);
        
        jTable.setCellSelectionEnabled(estado);
    }

    private void jButtonLimparMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonLimparMouseClicked
        this.ativarSalvarDeletar(false);
        this.limparSelecionar();
        jTable.clearSelection();
        this.limparFields();
    }//GEN-LAST:event_jButtonLimparMouseClicked

    private void jButtonDeletarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonDeletarMouseClicked
        
        if (!this.estadoSelecionar) {
            return;
        }
        
        DefaultTableModel jTableModel = (DefaultTableModel) jTable.getModel();
        
        jTableModel.removeRow(this.linhaAtual);
        
        this.limparSelecionar();
        this.limparFields();
        jTable.clearSelection();
        this.ativarSalvarDeletar(false);
    }//GEN-LAST:event_jButtonDeletarMouseClicked

    private void jButtonNovoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonNovoMouseClicked
        //TableModel jTableModel = jTable.getModel();        
        String nome = this.fieldNome.getText();
        String cpf = this.fieldCpf.getText();
        
        this.ativarSalvarDeletar(false);
        this.limparSelecionar();
        jTable.clearSelection();
        this.limparFields();
        
        if (nome.trim().equals("")) {
            return;
        }
        
        if (cpf.trim().equals("")) {
            return;
        }
        
        DefaultTableModel jTableModel = (DefaultTableModel) jTable.getModel();
        
        Object[] data = {
            nome, cpf
        };
        
        jTableModel.addRow(data);
    }//GEN-LAST:event_jButtonNovoMouseClicked

    private void jButtonSalvarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonSalvarMouseClicked
        
        if (!this.estadoSelecionar) {
            return;
        }
        
        DefaultTableModel jTableModel = (DefaultTableModel) jTable.getModel();
        
        String nome = this.fieldNome.getText();
        String cpf = this.fieldCpf.getText();
        
        Object[] data = {
            nome,
            cpf
        };

        // substitui em cada coluna
        for (int col = 0; col < jTableModel.getColumnCount(); col++) {
            jTableModel.setValueAt(data[col], this.linhaAtual, col);
        }
        
        this.limparSelecionar();
        jTable.clearSelection();
        this.limparFields();
        this.ativarSalvarDeletar(false);
    }//GEN-LAST:event_jButtonSalvarMouseClicked

    private void jButtonImportarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonImportarMouseClicked
        this.limparjTable();
        TableModel model = ClienteController.importar();
        
        if (model == null) {
            return;
        }
        
        jTable.setModel(model);
        //this.atualizacao();
    }//GEN-LAST:event_jButtonImportarMouseClicked

    private void jButtonExportarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonExportarMouseClicked
        TableModel model = jTable.getModel();
        ClienteController.exportar(model);
    }//GEN-LAST:event_jButtonExportarMouseClicked

    private void jButtonSelecionarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonSelecionarMouseClicked
        
        this.ativarSalvarDeletar(false);
        
        String selecionar = this.fieldSelecionar.getText().trim();
        
        String informe = "Informe o " + this.VALUEINDEX + "!";
        String naoEncontrado = this.VALUEINDEX + " nÃ£o encontrado!";
        
        if (selecionar.equalsIgnoreCase("")
                || selecionar.equalsIgnoreCase(informe)
                || selecionar.equalsIgnoreCase(naoEncontrado)) {
            this.limparSelecionar();
            jTable.clearSelection();
            this.limparFields();
            this.fieldSelecionar.setText(informe);
            return;
        }
        
        DefaultTableModel jTableModel = (DefaultTableModel) jTable.getModel();
        
        int valor = this.procurarValor(selecionar);
        
        if (valor == -1) {
            this.limparSelecionar();
            jTable.clearSelection();
            this.limparFields();
            this.fieldSelecionar.setText(naoEncontrado);
            return;
        }

        // nao funciona
        //jTable.setRowSelectionInterval(valor, valor);
        jTable.scrollRectToVisible(jTable.getCellRect(valor, 0, true));
        
        String nome = jTableModel.getValueAt(valor, 0).toString();
        String cpf = jTableModel.getValueAt(valor, 1).toString();
        
        this.fieldNome.setText(nome);
        this.fieldCpf.setText(cpf);
        
        this.ativarSalvarDeletar(true);
        this.linhaAtual = valor;
    }//GEN-LAST:event_jButtonSelecionarMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClienteView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClienteView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClienteView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClienteView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ClienteView().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField fieldCpf;
    private javax.swing.JTextField fieldNome;
    private javax.swing.JTextField fieldSelecionar;
    private javax.swing.JButton jButtonDeletar;
    private javax.swing.JButton jButtonExportar;
    private javax.swing.JButton jButtonImportar;
    private javax.swing.JButton jButtonLimpar;
    private javax.swing.JButton jButtonNovo;
    private javax.swing.JButton jButtonSalvar;
    private javax.swing.JButton jButtonSelecionar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable;
    // End of variables declaration//GEN-END:variables
}
